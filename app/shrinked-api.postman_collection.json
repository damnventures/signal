{
	"info": {
		"_postman_id": "735e489e-b329-4b73-930f-ad3db0bf5e59",
		"name": "shrinked-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27500888",
		"_collection_link": "https://srinked-api.postman.co/workspace/srinked-api-Workspace~eaa4aea0-d3eb-4d48-b4f9-14c5ff6ad002/collection/11431640-735e489e-b329-4b73-930f-ad3db0bf5e59?action=share&source=collection_link&creator=27500888"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"access_token\", response.accessToken);",
									"pm.environment.set(\"refresh_token\", response.refreshToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example1.com\",\n    \"password\": \"securePassword1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user and receive authentication tokens.\n\n📥 **Request (JSON)**  \n{  \n\"email\": \"[user@example.com](https://mailto:user@example.com)\",  \n\"password\": \"securePassword1\",  \n\"username\": \"John\",  \n}\n\n📤 **Response (200 OK)**  \n{  \n\"accessToken\": \"jwt-access-token\",  \n\"refreshToken\": \"jwt-refresh-token\"  \n}\n\n🛠 **Usage**  \nAfter registration, you can use the access token for API requests."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"access_token\", response.accessToken);",
									"pm.environment.set(\"refresh_token\", response.refreshToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"securePassword1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticate a user using email and password.\n\n📥 **Request (JSON)**  \n{  \n\"email\": \"[user@example.com](https://mailto:user@example.com)\",  \n\"password\": \"securePassword\"  \n}\n\n📤 **Response (200 OK)**  \n{  \n\"accessToken\": \"jwt-access-token\",  \n\"refreshToken\": \"jwt-refresh-token\"  \n}\n\n🛠 **Usage**  \nUse `{access_token}` for authorized requests."
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI3YzdjMWE2Ny0xM2Y5LTRlYjgtOWE5Mi1jMzNmZGM3ZmNiMjYiLCJlbWFpbCI6ImhvbGxvd0BnbWFpbC5jb20iLCJpYXQiOjE3NDAwOTMxNzgsImV4cCI6MTc0MDY5Nzk3OH0.NLFymNymOiTt9fFqaggenMa8F_YThxLfuTmgVYoZK1w\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Log out the user and invalidate the refresh token.\n\n📥 **Request (JSON)**  \n{  \n\"refreshToken\": \"refresh_token\"  \n}\n\n📤 **Response (200 OK)**  \n{  \n\"message\": \"Logout successful\"  \n}\n\n🛠 **Usage**  \nAfter logout, access & refresh tokens become invalid."
					},
					"response": []
				},
				{
					"name": "Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.environment.set(\"access_token\", response.accessToken);",
									"pm.environment.set(\"refresh_token\", response.refreshToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI0NjhiM2I1YS0wYzZkLTRkYTYtYjE4ZS03NTNlYmY0ZmNlYTMiLCJlbWFpbCI6ImV2aGVueWlwZXRyZW5rb0BnbWFpbC5jb20iLCJpYXQiOjE3NDAwOTYwMjMsImV4cCI6MTc0MDcwMDgyM30.jDAU2aPi086ByOUyR9gIOCDqUHxIlVu0Bf_EsW8S8_w\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Refresh an access token using a valid refresh token.\n\n📥 **Request (JSON)**  \n{  \n\"refreshToken\": \"refresh_token\"  \n}\n\n📤 **Response (200 OK)**  \n{  \n\"accessToken\": \"new-access-token\",  \n\"refreshToken\": \"new-refresh-token\"  \n}\n\n🛠 **Usage**  \nUse this when your access token expires."
					},
					"response": []
				},
				{
					"name": "Google Auth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/google",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"google"
							]
						},
						"description": "Redirects the user to Google's OAuth login page.\n\n📥 **Request**  \n`GET /auth/google`\n\n📤 **Response**  \nRedirects the user to Google's authentication page.\n\n🛠 **Usage**  \nAfter successful authentication, Google will redirect to `/auth/google/redirect`."
					},
					"response": []
				},
				{
					"name": "Google Redirect",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/google/redirect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"google",
								"redirect"
							]
						},
						"description": "Handles Google OAuth callback and returns authentication tokens.\n\n📤 **Response (200 OK)**  \n{  \n\"accessToken\": \"jwt-access-token\",  \n\"refreshToken\": \"jwt-refresh-token\"  \n}\n\n🛠 **Usage**  \nUse the returned tokens for authenticated requests."
					},
					"response": []
				},
				{
					"name": "Twitter Auth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/twitter",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"twitter"
							]
						},
						"description": "Redirects the user to Twitter's OAuth login page.\n\n📥 **Request**  \n`GET /auth/twitter`\n\n📤 **Response**  \nRedirects the user to Twitter's authentication page.\n\n🛠 **Usage**  \nAfter successful authentication, Twitter will redirect to `/auth/twitter/redirect`."
					},
					"response": []
				},
				{
					"name": "Twitter Redirect",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/twitter/redirect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"twitter",
								"redirect"
							]
						},
						"description": "Handles Twitter OAuth callback and returns authentication tokens.\n\n📤 **Response (200 OK)**  \n{  \n\"accessToken\": \"jwt-access-token\",  \n\"refreshToken\": \"jwt-refresh-token\"  \n}\n\n🛠 **Usage**  \nUse the returned tokens for authenticated requests."
					},
					"response": []
				},
				{
					"name": "Set Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"securePassword1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/set-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"set-password"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains authentication-related API endpoints for user login, registration, logout, token refresh, and OAuth authentication via Google and Twitter.\n\nEndpoints:\n\n- `POST /auth/login` → Authenticate a user and receive an access & refresh token.\n    \n- `POST /auth/register` → Register a new user and receive access & refresh tokens.\n    \n- `POST /auth/logout` → Invalidate the current refresh token and log out the user.\n    \n- `POST /auth/refresh` → Refresh the access token using a valid refresh token.\n    \n- `GET /auth/google` → Redirects to Google's OAuth login page.\n    \n- `GET /auth/google/redirect` → Handles Google OAuth callback and returns authentication tokens.\n    \n- `GET /auth/twitter` → Redirects to Twitter's OAuth login page.\n    \n- `GET /auth/twitter/redirect` → Handles Twitter OAuth callback and returns authentication tokens.\n    \n\nNote: For protected routes, ensure to use `{access_token}` in the Authorization header as `Bearer {access_token}`."
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Get Profile",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"profile"
							],
							"query": [
								{
									"key": "email",
									"value": "holllow666",
									"disabled": true
								}
							]
						},
						"description": "📌 **Get Profile (Отримання профілю)**\n\n**GET** /users/profile\n\nRetrieve the authenticated user’s profile.\n\n📂 **Request Headers**\n\nAuthorization: Bearer {{access_token}}\n\n📤 **Response (200 OK)**\n\n{\n\nUser Profile\n\n}\n\n🛠 **Usage**\n\nUse this to get details of the logged-in user."
					},
					"response": []
				},
				{
					"name": "Update profile",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roles\": [\n        \"super_admin\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"profile"
							]
						},
						"description": "📌 **Update Profile (Оновлення профілю)**\n\n**PATCH** /users/profile\n\nUpdate user profile details.\n\n📂 **Request (JSON)**\n\n{\n\n\"username\": \"Updated User Name\",\n\n}\n\n📤 **Response (200 OK)**\n\n{\n\nUser Profile\n\n}\n\n🛠 **Usage**\n\nUse this to update user details."
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"securePassword1\",\n  \"newPassword\": \"securePassword11\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"change-password"
							]
						},
						"description": "📌 **Change Password (Зміна пароля)**\n\n**PATCH** /users/change-password\n\nChange the authenticated user’s password.\n\n📂 **Request (JSON)**\n\n{\n\n\"oldPassword\": \"oldPassword\",\n\n\"newPassword\": \"newSecurePassword\"\n\n}\n\n📤 **Response (200 OK)**\n\n{\n\n\"message\": \"Password changed successfully\"\n\n}\n\n🛠 **Usage**\n\nUse this to securely update your password."
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"all"
							]
						},
						"description": "📌 **Get All Users (Адміністратор)**\n\n**GET** /users/all\n\nRetrieve a list of all users. (Admin only)\n\n📂 **Request Headers**\n\nAuthorization: Bearer {access_token}\n\n📤 **Response (200 OK)**\n\n\\[\n\n{\n\n```\n\"userId\": \"12345\",\n\"email\": \"user@example.com\"\n\n ```\n\n},\n\n{\n\n```\n\"userId\": \"67890\",\n\"email\": \"admin@example.com\"\n\n ```\n\n}\n\n\\]\n\n🛠 **Usage**\n\nAdmins can use this to manage users."
					},
					"response": []
				},
				{
					"name": "Create API KEY",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"default\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/c0960613-f863-4534-882a-c854d6e805a6/api-key",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"c0960613-f863-4534-882a-c854d6e805a6",
								"api-key"
							]
						},
						"description": "📌 **Create API Key**\n\n**POST** /users/:userId/api-key\n\nGenerate an API key for a user.\n\n📂 **Response (200 OK)**\n\n{\n\n\"id\": \"api-key-id\",\n\n\"key\": \"generated-api-key\",\n\n\"userId\": \"12345\"\n\n}\n\n🛠 **Usage**\n\nUse this to issue an API key for authentication."
					},
					"response": []
				},
				{
					"name": "Delete API KEY",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/api-key/927b485ec93f55f5e9ca6a4decd8b34d8ba359ea5698f9578a0f0ea57817953b",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"api-key",
								"927b485ec93f55f5e9ca6a4decd8b34d8ba359ea5698f9578a0f0ea57817953b"
							]
						},
						"description": "📌 **Deactivate API Key**\n\n  \n\n**DELETE** /users/api-key/:keyId\n\n  \n\nDeactivate an existing API key.\n\n  \n\n📂 **Response (200 OK)**\n\n  \n\n{\n\n  \"message\": \"API key deactivated\"\n\n}\n\n  \n\n🛠 **Usage**\n\nUse this to disable an API key."
					},
					"response": []
				},
				{
					"name": "Regenerate API Key",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/api-key/927b485ec93f55f5e9ca6a4decd8b34d8ba359ea5698f9578a0f0ea57817953b/regenerate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"api-key",
								"927b485ec93f55f5e9ca6a4decd8b34d8ba359ea5698f9578a0f0ea57817953b",
								"regenerate"
							]
						},
						"description": "📌 **Regenerate API Key**\n\n  \n\n**POST** /users/api-key/:keyId/regenerate\n\n  \n\nGenerate a new API key to replace an existing one.\n\n  \n\n📂 **Response (200 OK)**\n\n  \n\n{\n\n  \"id\": \"new-api-key-id\",\n\n  \"key\": \"new-generated-api-key\",\n\n  \"userId\": \"12345\"\n\n}\n\n  \n\n🛠 **Usage**\n\nUse this to refresh API keys for security."
					},
					"response": []
				},
				{
					"name": "GET API KEYS",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/api-keys",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"api-keys"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains user-related API endpoints for profile management, password changes, user listing (admin), and API key management.\n\nEndpoints:\n\n- `GET /users/profile` → Retrieve the authenticated user's profile.\n    \n- `PATCH /users/profile` → Update the authenticated user's profile.\n    \n- `PATCH /users/change-password` → Change the user's password.\n    \n- `GET /users/all` → Retrieve all users (Admin only).\n    \n- `POST /users/:userId/api-key` → Create an API key for a user.\n    \n- `DELETE /users/api-key/:keyId` → Deactivate an API key.\n    \n- `POST /users/api-key/:keyId/regenerate` → Regenerate an API key.\n    \n- `GET /users/secure-endpoint` → A protected endpoint requiring an API key.\n    \n\nNote: For protected routes, use `{access_token}` in the Authorization header as `Bearer {access_token}`."
		},
		{
			"name": "Jobs",
			"item": [
				{
					"name": "Create Job",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "f91f3df23652c1c0e26a5647607d0060ad58452247fd20c92c5cf7c81e113a08",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobName\": \"Example Job12\",\n  \"scenario\": \"SINGLE_FILE_DEFAULT\",\n  \"email\": \"Ivan.glushenkov.data@gmail.com\",\n  \"lang\": \"en\",\n  \"isPublic\": true,\n  \"createPage\": false,\n  \"links\": [\"https://sieve-prod-us-central1-persistent-bucket.storage.googleapis.com/a38b2ef8-0fd6-4d87-962c-7a7867a45e5e/b0c7d952-dba1-45b1-a80c-5f66fc88211c/237bfca5-979a-4ba4-a51a-fc8982db10c8/tmpao85hkov.mp3?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=abhi-admin%40sieve-grapefruit.iam.gserviceaccount.com%2F20250728%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20250728T071150Z&X-Goog-Expires=172800&X-Goog-SignedHeaders=host&x-goog-signature=4b16229c188250b67be62e9177858cc9c08444d192c3d31bfe73751d4125bb090489b290c0a04df31170f1a58eec5e92b1fd235c54021f018798708014d3222fd12f1e134c78e2e1ec1de814b88058e009eced1835b30a6d1ec8ca4e55a4082f3d5354c07081e44e4b6f2ee48cbfbfc6ccfb81d35c8f5c3ed74b4db7622240f2417b6a1ac80dd742a932099d23284fd9a578d9d77671051fac37b442961f4c84a6296ed4b710b61142c4d80449278a2fc022c3b1e1222688536d15bcd6c86b57f08a4de099a14bb7804f8d387ffd370886f759c45fcf819efcbe66cacb5923a518dbc61623c4ac86ca5528891012e63f95095d6e1296bb4d8c997504eb4cc014\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Job by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"access_token\")) {",
									"    pm.sendRequest({",
									"        url: pm.environment.get(\"base_url\") + \"/auth/refresh\",",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/json\"",
									"        },",
									"        body: {",
									"            mode: \"raw\",",
									"            raw: JSON.stringify({",
									"                \"refreshToken\": pm.environment.get(\"refresh_token\")",
									"            })",
									"        }",
									"    }, function (err, res) {",
									"        if (!err && res.code === 200) {",
									"            let response = res.json();",
									"            pm.environment.set(\"access_token\", response.accessToken);",
									"            pm.environment.set(\"refresh_token\", response.refreshToken);",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs/67bfc9c3303e62a93bdd853b",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								"67bfc9c3303e62a93bdd853b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Jobs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Restart Job",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/jobs/:id/restart",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								":id",
								"restart"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Export Doc",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/jobs/exportdoc/:docId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								"exportdoc",
								":docId"
							],
							"variable": [
								{
									"key": "docId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Job By Result Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/jobs/by-result/67c7262e15185dcb0b9a8473",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								"by-result",
								"67c7262e15185dcb0b9a8473"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains job-related API endpoints that allow users to create, retrieve, and restart jobs.\n\n- **JWT Authentication (****`/jobs`****)**: Users must be authenticated using a Bearer token.\n    \n- **API Key Authentication (****`/jobs/key`****)**: Users must authenticate using an API key.\n    \n\nEndpoints:\n\n- `POST /jobs` → Create a new job (JWT required).\n    \n- `GET /jobs` → Retrieve all jobs for the authenticated user.\n    \n- `GET /jobs/:id` → Retrieve a specific job by ID.\n    \n- `POST /jobs/:id/restart` → Restart a job by ID.\n    \n- `POST /jobs/key` → Create a job using API Key authentication.\n    \n- `GET /jobs/key` → Retrieve all jobs (API Key required).\n    \n- `GET /jobs/key/:id` → Retrieve a specific job by ID (API Key required).\n    \n- `POST /jobs/key/:id/restart` → Restart a job using API Key authentication.\n    \n\n**Note:**  \nFor `Bearer Token` authentication, use `Authorization: Bearer {access_token}`.  \nFor `API Key` authentication, use `x-api-key: {api_key}`."
		},
		{
			"name": "Processing",
			"item": [
				{
					"name": "Get Processing Document",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/processing/67bcf730dbd12406323651de/document",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"processing",
								"67bcf730dbd12406323651de",
								"document"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Documents",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/processing/user/67c79d768213b8eb757f6ca7/documents?fields",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"processing",
								"user",
								"67c79d768213b8eb757f6ca7",
								"documents"
							],
							"query": [
								{
									"key": "fields",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PDF",
			"item": [
				{
					"name": "Get Pdf From Json",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pdf/67c89ba0d1e04535a1917bbf/json?includeReferences=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pdf",
								"67c89ba0d1e04535a1917bbf",
								"json"
							],
							"query": [
								{
									"key": "includeReferences",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Markdown From Json",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pdf/67c89ba0d1e04535a1917bbf/markdown?includeReferences=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pdf",
								"67c89ba0d1e04535a1917bbf",
								"markdown"
							],
							"query": [
								{
									"key": "includeReferences",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscription",
			"item": [
				{
					"name": "Create  Plan",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "adbb62efb955f980c760b7c553caf3b2b94e8d010eb3da14a935933f981f19b9",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PRO Plan v2\",\n  \"monthlyPrice\": 4900,\n  \"yearlyPrice\": 4900,\n  \"stripeMonthlyPriceId\": \"price_1RKKodRWE55aITymNyB0kG3S\",\n  \"stripeYearlyPriceId\": \"price_1RKKodRWE55aITymNyB0kG3S\",\n  \"processingTimeLimit\": 110000,\n  \"jobsPerMonth\": 1,\n  \"maxConcurrentJobs\": 1,\n  \"apiCallsPerDay\": 1,\n  \"webhookEndpoints\": 1,\n  \"storageRepositories\": 1,\n  \"dataRetentionDays\": 1,\n  \"domainSupport\": 1,\n  \"privateRepositories\": true,\n  \"protocolFormatting\": \"ADMIN\",\n  \"exportFormats\": \"ADMIN\",\n  \"relationshipMapping\": true,\n  \"securityLevel\": \"ADMIN\",\n  \"onPremiseDeployment\": true,\n  \"ssoSupport\": true,\n  \"supportLevel\": \"ADMIN\",\n  \"dedicatedManager\": true,\n  \"capsuleLimit\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/subscriptions/plans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"subscriptions",
								"plans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Plans",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/subscriptions/plans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"subscriptions",
								"plans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  Plan",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"stripeMonthlyPriceId\": \"price_1R6eDURWE55aITymOwweRfF9\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/subscriptions/plans/67dd9e0cbd0846c40b4bdf22",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"subscriptions",
								"plans",
								"67dd9e0cbd0846c40b4bdf22"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Plan",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/subscriptions/plans/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"subscriptions",
								"plans",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Usage",
			"item": [
				{
					"name": "Get Usage For Period",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"FREE\",\n  \"monthlyPrice\": 0,\n  \"yearlyPrice\": 0,\n  \"stripeMonthlyPriceId\": \"\",\n  \"stripeYearlyPriceId\": \"\",\n  \"processingTimeLimit\": 11880000,\n  \"jobsPerMonth\": 5,\n  \"maxConcurrentJobs\": 1,\n  \"apiCallsPerDay\": 100,\n  \"webhookEndpoints\": 0,\n  \"storageRepositories\": 3,\n  \"dataRetentionDays\": 3,\n  \"domainSupport\": 1,\n  \"privateRepositories\": false,\n  \"protocolFormatting\": \"Basic\",\n  \"exportFormats\": \"Markdown\",\n  \"relationshipMapping\": false,\n  \"securityLevel\": \"Standard\",\n  \"onPremiseDeployment\": false,\n  \"ssoSupport\": false,\n  \"supportLevel\": \"Community\",\n  \"dedicatedManager\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usage/period?subscriptionId=string&usageType=UsageType&start=string&end=string",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usage",
								"period"
							],
							"query": [
								{
									"key": "subscriptionId",
									"value": "string"
								},
								{
									"key": "usageType",
									"value": "UsageType"
								},
								{
									"key": "start",
									"value": "string"
								},
								{
									"key": "end",
									"value": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Monthly Usage",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usage/monthly/:subscriptionId/jobsCount",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usage",
								"monthly",
								":subscriptionId",
								"jobsCount"
							],
							"variable": [
								{
									"key": "subscriptionId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Prompts",
			"item": [
				{
					"name": "Get All Prompts",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/prompts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"prompts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upsert Prompt",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"section\": \"contributors\",\n  \"prompt\": \"Thoroughly review the <context> and identify contributors. Output as Markdown list. Always add \\\"- [Shrinked AI](https://app.shrinked.ai), Chief of Stuff, Waffly, Inc.\\\" at the end. Start with \\\"## Contributors, Acknowledgements, Mentions\\\"\",\n  \"prefill\": \"## Contributors, Acknowledgements, Mentions\\n\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/prompts/upsert",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"prompts",
								"upsert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Prompt by Section",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/prompts/:section",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"prompts",
								":section"
							],
							"variable": [
								{
									"key": "section",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Manage AI prompts via admin API (get, upsert, delete)"
		},
		{
			"name": "Capsule",
			"item": [
				{
					"name": "Create a new capsule",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Bioengineering Lecture Summary\",      // Optional\n  \"slug\": \"bioengineering-lecture-summary\"       // Optional (auto-generated from name if not provided)\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/capsules",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"capsules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single capsule by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/capsules/680940dba83fde613f571bdf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"capsules",
								"680940dba83fde613f571bdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get fullContext capsule by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/capsules/680940dba83fde613f571bdf/context",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"capsules",
								"680940dba83fde613f571bdf",
								"context"
							]
						}
					},
					"response": []
				},
				{
					"name": "Regenerate capsule by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/capsules/680940dba83fde613f571bdf/regenerate?overridePrompt=\" \"",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"capsules",
								"680940dba83fde613f571bdf",
								"regenerate"
							],
							"query": [
								{
									"key": "overridePrompt",
									"value": "\" \""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve all capsules owned by the current user",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/capsules",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"capsules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a document (processed doc) to a capsule",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fileIds\": [\"67e2e07afc9e87f62dfa6d50\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/capsules/680940dba83fde613f571bdf/files",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"capsules",
								"680940dba83fde613f571bdf",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a document from a capsule",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/capsules/:id/files/:fileId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"capsules",
								":id",
								"files",
								":fileId"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "fileId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/capsules/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"capsules",
								"search"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}